from tkinter import *
from tkinter import messagebox  # must be imported separated since it's not a class, just a module of code
from random import choice, shuffle, randint
import pyperclip
import json
# ---------------------------- CONSTANTS ------------------------------- #
FONT = ("Calibri", 10)
BLACK = "#393e46"
DARK_BLUE = "#222831"
GREY = "#eeeeee"
TURQUOISE = "#00adb5"

# ---------------------------- PASSWORD GENERATOR ------------------------------- #


def generate_password():
    # embedding the password generator code from day 5
    # Password Generator Project
    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
               'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
               'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
    numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']

    # adjusted so the user doesn't have to type anything in the console
    # pick random letters, symbols, numbers - applying list comprehension instead of the original FOR loop
    random_letters = [choice(letters) for _ in range(0, randint(8, 10))]
    random_symbols = [choice(symbols) for _ in range(0, randint(2, 4))]
    random_numbers = [choice(numbers) for _ in range(0, randint(2, 4))]

    password_list = random_letters + random_symbols + random_numbers
    shuffle(password_list)

    # join all items in a list/tuple/dict into a string, separated by a character specified in the quotes
    password = "".join(password_list)  # no character separator, simply an empty string
    password_input.delete(0, END)
    password_input.insert(0, password)

    # automatically copy the generated password to the clipboard using the pyperclip library
    pyperclip.copy(password)

# ---------------------------- SAVE PASSWORD ------------------------------- #
# when add is clicked, take entry inputs and save data into a file called data.txt


def save_password():

    website = website_input.get()   # fetch current entry text
    email = email_input.get()
    password = password_input.get()
    # first level key of the nested dictionary is the website, since this is what we'll search through
    # the website itself will contain a dictionary with two keys - email and password
    new_data = {
        website: {
            "email": email,
            "password": password
        }
    }

    # check if the length of the entries is 0. if true, let the user know.
    if len(website) == 0 or len(email) == 0 or len(password) == 0:
        messagebox.showinfo(title="You have empty fields!", message="Please don't leave any fields empty!")
    else:
        # standard dialogs: popups generated by tkinter
        # first check that the user is ok with the details before saving
        # output of these messagebox type will be a boolean
        is_ok = messagebox.askokcancel(title=website, message=f"These are the details you have entered: "
                                                              f"\nEmail: {email} \nPassword: {password} "
                                                              f"\nIs it ok to save this information?")

        # if user is ok, save information. otherwise, do nothing.
        # if is_ok:
        #     with open("data.txt", mode="a") as file:
        #         file.write(f"{website} | {email} | {password}\n")
        #         # clear out all information other than the email
        #         website_input.delete(0, END)
        #         password_input.delete(0, END)

        # ---------------------------- STORING DATA IN JSON INSTEAD OF TXT ------------------------------- #
        # Changing data storage from a text file to a JSON file
        if is_ok:
            try:
                with open("data.json", mode="r") as file:
                    # 1. Reading old data
                    data = json.load(file)
            except FileNotFoundError:
                with open("data.json", mode="w") as file:
                    # Create a new JSON file and save new Data in it
                    json.dump(new_data, file, indent=4)  # writing updated data dictionary to a JSON file
            else:
                # 2. Updating old data with new data
                data.update(new_data)

                with open("data.json", mode="w") as file:
                    # 3. Saving Updated Data back to JSON file and wipe away all previous data
                    json.dump(data, file, indent=4)  # writing updated data dictionary to a JSON file
            finally:
                # clear out all information other than the email
                website_input.delete(0, END)
                password_input.delete(0, END)

# ---------------------------- ADDING SEARCH PASSWORD FUNCTIONALITY ------------------------------- #
# Type a website into the website entry, click a Search button
# Results in a popup containing the email and password saved for that website
# 1. Create search button next to website entry field, adjust layout and other widgets as needed


def find_password():
    # 2. Create a function called find_password() that gets triggered when the search button is pressed
    website = website_input.get()

    try:
        with open("data.json") as file:
            data = json.load(file)
    except FileNotFoundError:
        # 5. Catch exception that may occur if trying to access a data.json that hasn't been created yet
        messagebox.showinfo(title="File not found", message="Sorry, no data file found.")
    else:
        # 3. Check if user's search entry matches an item in data.json
        # NOTE: An exception can be raised here, but if you can use IF/ELSE then use it
        # if it's an error that you can't use IF/ELSE and there's no other way of dealing with it, then use try/except

        # exceptions are meant to be exceptional - happens very rarely.
        # if / else catches things that happen frequently - like getting a search wrong

        if website in data:
            # 4. If found, show a messagebox with the website name and password
            email = data[website]["email"]
            password = data[website]["password"]
            messagebox.showinfo(title=f"Search Results: {website}", message="Here are your details: \n"
                                                                            f"Email: {email} \nPassword: {password}")
        else:
            # 6. If not found, show a messagebox indicating that no details for that website was found
            messagebox.showinfo(title="Website not found", message="Sorry, no details for this website exists.")

# ---------------------------- UI SETUP ------------------------------- #
window = Tk()
window.title("Password Manager")
window.config(padx=40, pady=40, bg=BLACK)

canvas = Canvas(width=200, height=200, bg=BLACK, highlightthickness=0)
logo_img = PhotoImage(file="logo.png")
canvas.create_image(100, 100, image=logo_img)
canvas.grid(column=1, row=0)

# Labels
website_label = Label(text="Website:", font=FONT, bg=BLACK, fg=GREY)
website_label.grid(column=0, row=1, padx=(0, 15))

email_label = Label(text="Email/Username:", font=FONT, bg=BLACK, fg=GREY)
email_label.grid(column=0, row=2, padx=(0, 15))

password_label = Label(text="Password:", font=FONT, bg=BLACK, fg=GREY)
password_label.grid(column=0, row=3, padx=(0, 15))

# entries
# columnspan allows a widget to span more than one column
# sticky ="EW" means widget will occupy all grid space from east edge to west edge
website_input = Entry(width=33)
website_input.grid(column=1, row=1, pady=(0, 2.5))
website_input.focus()  # cursor will automatically be placed in this entry when program starts

email_input = Entry()
email_input.grid(column=1, row=2, columnspan=2, sticky="EW", pady=(2.5, 2.5))
email_input.insert(0, "michael@gmail.com")  # pre-populate entry with the most commonly used email at a specified index

password_input = Entry(width=33)
password_input.grid(column=1, row=3)

# buttons
search_button = Button(text="Search", command=find_password, bg=DARK_BLUE, fg=GREY,
                       activebackground=GREY, activeforeground=BLACK, relief=GROOVE, bd=0)
search_button.grid(column=2, row=1, sticky="EW", padx=(2.5, 0), pady=(2.5, 2.5))

generate_button = Button(text="Generate Password", command=generate_password, bg=DARK_BLUE, fg=GREY,
                         activebackground=GREY, activeforeground=BLACK, relief=GROOVE, bd=0)
generate_button.grid(column=2, row=3, sticky="EW", padx=(2.5, 0), pady=(2.5, 2.5))

add_button = Button(text="Add", command=save_password, width=36, bg=DARK_BLUE, fg=GREY,
                    activebackground=GREY, activeforeground=BLACK, relief=GROOVE, bd=0)
add_button.grid(column=1, row=4, columnspan=2, sticky="EW", pady=(2.5, 0))

window.mainloop()
